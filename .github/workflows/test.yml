name: Django Tests (Docker Compose)

on:
  push:
  pull_request:
  workflow_dispatch:  # allow manual runs from the Actions tab

jobs:
  test:
    runs-on: ubuntu-latest

    defaults:
      run:
        working-directory: backend

    env:
      DJANGO_SETTINGS_MODULE: restaurantApi.settings
      DB_HOST: postgres
      DB_PORT: "5432"

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Generate CI .env (from Secrets)
        run: |
          cat > .env <<EOF
          # Database
          DB_NAME=${{ secrets.DB_NAME }}
          DB_USER=${{ secrets.DB_USER }}
          DB_PASSWORD=${{ secrets.DB_PASSWORD }}
          DB_HOST=postgres
          DB_PORT=5432

          # Email
          EMAIL_HOST=smtp.gmail.com
          EMAIL_PORT=587
          EMAIL_HOST_USER=${{ secrets.EMAIL_HOST_USER }}
          EMAIL_HOST_PASSWORD=${{ secrets.EMAIL_HOST_PASSWORD }}
          EMAIL_USE_TLS=true
          EMAIL_USE_SSL=false
          DEFAULT_FROM_EMAIL=restaurant_api <${{ secrets.EMAIL_HOST_USER }}>

          # Redis
          REDIS_URL=${{ secrets.CI_REDIS_URL || 'redis://redis:6379/1' }}
          EOF

      - name: Print .env (debug only!)
        run: |
          echo "----- .env -----"
          cat .env
          echo "----------------"

      - name: Show Docker versions
        run: |
          docker --version
          docker compose version

      - name: Build images
        run: docker compose -f docker-compose.yml build

      - name: Start DB + cache (detached)
        run: docker compose -f docker-compose.yml up -d postgres redis
      
      - name: Postgres logs (tail)
        if: failure()
        run: docker compose logs --tail=200 postgres

      - name: Wait for healthchecks
        run: |
          # Poll until postgres & redis are healthy (uses your compose healthchecks)
          for i in {1..30}; do
            unhealthy=$(docker compose ps --format json | jq -r '.[] | select(.Name | test("postgres|redis")) | select(.Health != "healthy") | .Name' | wc -l)
            [ "$unhealthy" -eq 0 ] && break
            echo "Waiting for services to be healthy... ($i/30)"
            docker compose ps
            sleep 3
          done
          docker compose ps

      - name: Run migrations + tests inside web container
        # Run against the same image/volume mapping as local dev
        run: |
          docker compose run --rm web bash -lc "
            python --version &&
            python manage.py migrate --noinput &&
            python manage.py test
          "

      - name: Tear down
        if: always()
        run: docker compose -f docker-compose.yml down -v
